#!/usr/bin/env python3
"""
Character Extraction Command
Main command for extracting characters from manga images using SAM + YOLO
"""

import os
import sys
import argparse
import time
from pathlib import Path
from typing import Optional, Dict, Any, List

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

import cv2
import numpy as np

from hooks.start import get_sam_model, get_yolo_model, get_performance_monitor
from utils.preprocessing import preprocess_image_pipeline
from utils.postprocessing import (
    enhance_character_mask, 
    extract_character_from_image, 
    crop_to_content,
    save_character_result,
    calculate_mask_quality_metrics
)
from utils.text_detection import TextDetector


def extract_character_from_path(image_path: str,
                               output_path: Optional[str] = None,
                               enhance_contrast: bool = False,
                               filter_text: bool = True,
                               save_mask: bool = True,
                               save_transparent: bool = True,
                               min_yolo_score: float = 0.1,
                               verbose: bool = True) -> Dict[str, Any]:
    """
    画像パスからキャラクターを抽出
    
    Args:
        image_path: 入力画像パス
        output_path: 出力パス（None の場合は自動生成）
        enhance_contrast: コントラスト強化
        filter_text: テキスト領域フィルタリング
        save_mask: マスクを保存
        save_transparent: 透明背景版を保存
        min_yolo_score: YOLO最小スコア
        verbose: 詳細出力
        
    Returns:
        抽出結果の辞書
    """
    result = {
        'success': False,
        'input_path': image_path,
        'output_path': None,
        'processing_time': 0.0,
        'mask_quality': {},
        'error': None
    }
    
    start_time = time.time()
    
    try:
        # Get models
        sam_model = get_sam_model()
        yolo_model = get_yolo_model()
        performance_monitor = get_performance_monitor()
        
        if not sam_model or not yolo_model:
            raise RuntimeError("Models not initialized. Run start hook first.")
        
        if verbose:
            print(f"🎯 キャラクター抽出開始: {image_path}")
        
        # Step 1: Image preprocessing
        performance_monitor.start_stage("Image Preprocessing")
        bgr_image, rgb_image, scale = preprocess_image_pipeline(
            image_path, 
            enhance_contrast=enhance_contrast
        )
        
        if rgb_image is None:
            raise ValueError(f"Failed to load image: {image_path}")
        
        performance_monitor.end_stage()
        
        # Step 2: SAM mask generation
        performance_monitor.start_stage("SAM Mask Generation")
        all_masks = sam_model.generate_masks(rgb_image)
        
        if not all_masks:
            raise ValueError("No masks generated by SAM")
        
        character_masks = sam_model.filter_character_masks(all_masks)
        
        if verbose:
            print(f"📊 生成マスク: {len(all_masks)} → キャラクター候補: {len(character_masks)}")
        
        performance_monitor.end_stage()
        
        # Step 3: YOLO scoring
        performance_monitor.start_stage("YOLO Scoring")
        scored_masks = yolo_model.score_masks_with_detections(character_masks, bgr_image)
        
        best_mask = yolo_model.get_best_character_mask(
            scored_masks, 
            bgr_image, 
            min_yolo_score=min_yolo_score
        )
        
        if best_mask is None:
            raise ValueError(f"No good character masks found (min YOLO score: {min_yolo_score})")
        
        if verbose:
            print(f"🎯 最適マスク選択: YOLO score={best_mask['yolo_score']:.3f}, "
                  f"combined score={best_mask['combined_score']:.3f}")
        
        performance_monitor.end_stage()
        
        # Step 4: Text filtering (optional)
        if filter_text:
            performance_monitor.start_stage("Text Filtering")
            text_detector = TextDetector(use_easyocr=True)
            
            text_density = text_detector.calculate_text_density_score(
                bgr_image, 
                best_mask['bbox']
            )
            
            if text_density > 0.5:
                if verbose:
                    print(f"⚠️ 高テキスト密度検出: {text_density:.3f} - 処理続行")
            
            # Add text density to result
            best_mask['text_density'] = text_density
            performance_monitor.end_stage()
        
        # Step 5: Mask refinement
        performance_monitor.start_stage("Mask Refinement")
        raw_mask = sam_model.mask_to_binary(best_mask)
        enhanced_mask = enhance_character_mask(
            raw_mask,
            remove_small_area=100,
            smooth_kernel=3,
            fill_holes=True
        )
        
        # Calculate mask quality metrics
        quality_metrics = calculate_mask_quality_metrics(enhanced_mask)
        result['mask_quality'] = quality_metrics
        
        if verbose:
            print(f"📐 マスク品質: coverage={quality_metrics['coverage_ratio']:.3f}, "
                  f"compactness={quality_metrics['compactness']:.3f}")
        
        performance_monitor.end_stage()
        
        # Step 6: Character extraction
        performance_monitor.start_stage("Character Extraction")
        character_image = extract_character_from_image(
            bgr_image, 
            enhanced_mask,
            background_color=(0, 0, 0)  # Black background
        )
        
        # Crop to content
        cropped_character, cropped_mask, crop_bbox = crop_to_content(
            character_image,
            enhanced_mask,
            padding=10
        )
        
        performance_monitor.end_stage()
        
        # Step 7: Save results
        performance_monitor.start_stage("Saving Results")
        
        # Generate output path if not provided
        if output_path is None:
            input_path = Path(image_path)
            output_dir = input_path.parent / "character_output"
            output_dir.mkdir(exist_ok=True)
            output_path = output_dir / input_path.stem
        
        # Save results
        save_success = save_character_result(
            cropped_character,
            cropped_mask,
            str(output_path),
            save_mask=save_mask,
            save_transparent=save_transparent
        )
        
        if not save_success:
            raise RuntimeError("Failed to save results")
        
        result['output_path'] = str(output_path)
        performance_monitor.end_stage()
        
        # Success
        result['success'] = True
        result['processing_time'] = time.time() - start_time
        
        if verbose:
            print(f"✅ キャラクター抽出完了: {result['processing_time']:.2f}秒")
            print(f"   出力: {result['output_path']}")
        
        return result
        
    except Exception as e:
        result['error'] = str(e)
        result['processing_time'] = time.time() - start_time
        
        if verbose:
            print(f"❌ 抽出失敗: {e}")
        
        return result


def batch_extract_characters(input_dir: str,
                           output_dir: str,
                           **extract_kwargs) -> Dict[str, Any]:
    """
    ディレクトリ内の全画像に対してバッチ処理
    
    Args:
        input_dir: 入力ディレクトリ
        output_dir: 出力ディレクトリ
        **extract_kwargs: extract_character_from_path の引数
        
    Returns:
        バッチ処理結果
    """
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    
    if not input_path.exists():
        return {'success': False, 'error': f'Input directory not found: {input_dir}'}
    
    # 画像ファイルを取得
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp'}
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(input_path.glob(f'*{ext}'))
        image_files.extend(input_path.glob(f'*{ext.upper()}'))
    
    if not image_files:
        return {'success': False, 'error': f'No image files found in {input_dir}'}
    
    # 出力ディレクトリ作成
    output_path.mkdir(parents=True, exist_ok=True)
    
    # バッチ処理実行
    results = []
    successful = 0
    
    print(f"🚀 バッチ処理開始: {len(image_files)} 画像")
    
    for i, image_file in enumerate(image_files, 1):
        print(f"\n📁 処理中 [{i}/{len(image_files)}]: {image_file.name}")
        
        # 出力パス生成
        output_file = output_path / image_file.stem
        
        # 抽出実行
        result = extract_character_from_path(
            str(image_file),
            output_path=str(output_file),
            verbose=False,  # バッチ処理では詳細出力を抑制
            **extract_kwargs
        )
        
        result['filename'] = image_file.name
        results.append(result)
        
        if result['success']:
            successful += 1
            print(f"✅ 成功: {image_file.name}")
        else:
            print(f"❌ 失敗: {image_file.name} - {result['error']}")
    
    # 結果サマリ
    batch_result = {
        'success': True,
        'total_files': len(image_files),
        'successful': successful,
        'failed': len(image_files) - successful,
        'success_rate': successful / len(image_files),
        'results': results
    }
    
    print(f"\n📊 バッチ処理完了:")
    print(f"   成功: {successful}/{len(image_files)} ({batch_result['success_rate']:.1%})")
    
    return batch_result


def main():
    """Main function for command line interface"""
    parser = argparse.ArgumentParser(description="Character Extraction using SAM + YOLO")
    
    parser.add_argument('input', help='Input image path or directory')
    parser.add_argument('-o', '--output', help='Output path (auto-generated if not specified)')
    parser.add_argument('--batch', action='store_true', help='Batch processing mode')
    parser.add_argument('--enhance-contrast', action='store_true', help='Enhance image contrast')
    parser.add_argument('--filter-text', action='store_true', default=True, help='Filter text regions')
    parser.add_argument('--save-mask', action='store_true', default=True, help='Save mask files')
    parser.add_argument('--save-transparent', action='store_true', default=True, help='Save transparent background')
    parser.add_argument('--min-yolo-score', type=float, default=0.1, help='Minimum YOLO score threshold')
    parser.add_argument('--verbose', action='store_true', default=True, help='Verbose output')
    
    args = parser.parse_args()
    
    # Extract common arguments
    extract_args = {
        'enhance_contrast': args.enhance_contrast,
        'filter_text': args.filter_text,
        'save_mask': args.save_mask,
        'save_transparent': args.save_transparent,
        'min_yolo_score': args.min_yolo_score,
        'verbose': args.verbose
    }
    
    if args.batch:
        # Batch processing
        output_dir = args.output or f"{args.input}_character_output"
        result = batch_extract_characters(args.input, output_dir, **extract_args)
    else:
        # Single file processing
        result = extract_character_from_path(args.input, args.output, **extract_args)
    
    # Exit with appropriate code
    sys.exit(0 if result['success'] else 1)


if __name__ == "__main__":
    main()
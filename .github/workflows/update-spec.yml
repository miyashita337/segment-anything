name: Specification Update and Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'spec.md'
      - 'requirements.txt'
      - 'setup.py'
      - 'core/**'
      - 'features/**'
      - 'tools/**'
  push:
    branches: [main]
    paths:
      - 'spec.md'
      - 'requirements.txt'
      - 'setup.py'
      - 'core/**'
      - 'features/**'
      - 'tools/**'
  workflow_dispatch:

jobs:
  spec-validation:
    name: Validate Environment Specifications
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Base Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
        
    - name: Validate spec.md Format
      run: |
        python3 -c "
        import yaml
        import re
        import sys
        
        # Read spec.md
        with open('spec.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print('üîç Validating spec.md format...')
        
        # Check required sections
        required_sections = [
            '„Éè„Éº„Éâ„Ç¶„Çß„Ç¢Ë¶Å‰ª∂',
            '„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢Ë¶Å‰ª∂', 
            '„É¢„Éá„É´„Éï„Ç°„Ç§„É´Ë¶Å‰ª∂',
            'ÂØæÂøúÁîªÂÉèÂΩ¢Âºè'
        ]
        
        for section in required_sections:
            if section not in content:
                print(f'‚ùå Missing required section: {section}')
                sys.exit(1)
            else:
                print(f'‚úÖ Found section: {section}')
        
        # Check version patterns
        if 'python_version:' in content and 'recommended_version:' in content:
            print('‚úÖ Python version specifications found')
        else:
            print('‚ùå Python version specifications missing')
            sys.exit(1)
            
        print('‚úÖ spec.md format validation passed')
        "
        
    - name: Check Python Version Compatibility
      run: |
        python3 -c "
        import sys
        import re
        
        # Read spec.md for Python version requirements
        with open('spec.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print('üêç Checking Python version compatibility...')
        
        # Extract version requirement
        version_match = re.search(r'python_version:\s*\"([^\"]+)\"', content)
        if version_match:
            version_spec = version_match.group(1)
            print(f'üìã Spec requires Python: {version_spec}')
            
            current_version = f'{sys.version_info.major}.{sys.version_info.minor}'
            print(f'üîç Current Python version: {current_version}')
            
            # Basic compatibility check (simplified)
            if '3.8' in version_spec and sys.version_info >= (3, 8):
                print('‚úÖ Python version compatibility check passed')
            else:
                print('‚ö†Ô∏è Python version compatibility unclear')
        else:
            print('‚ùå Could not extract Python version from spec.md')
            exit(1)
        "
        
    - name: Validate Image Format Specifications
      run: |
        python3 -c "
        import re
        
        with open('spec.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print('üñºÔ∏è Checking image format specifications...')
        
        # Check for supported formats
        supported_formats = ['.jpg', '.jpeg', '.png', '.webp']
        format_section_found = False
        
        for format_type in supported_formats:
            if format_type in content:
                print(f'‚úÖ Found format support: {format_type}')
                format_section_found = True
        
        if not format_section_found:
            print('‚ùå No image format specifications found')
            exit(1)
        else:
            print('‚úÖ Image format specifications validated')
        "
        
    - name: Check Model File Requirements
      run: |
        python3 -c "
        import re
        
        with open('spec.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print('ü§ñ Checking model file specifications...')
        
        # Check for required model files
        required_models = [
            'sam_vit_h_4b8939.pth',
            'yolov8'  # Various YOLO models
        ]
        
        models_found = []
        for model in required_models:
            if model in content:
                print(f'‚úÖ Found model specification: {model}')
                models_found.append(model)
        
        if len(models_found) < len(required_models):
            print('‚ùå Some required model specifications missing')
            exit(1)
        else:
            print('‚úÖ Model file specifications validated')
        "

  dependency-check:
    name: Dependency Consistency Check
    runs-on: ubuntu-latest
    needs: spec-validation
    
    steps:
    - name: Checkout Repository  
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check Requirements Consistency
      run: |
        python3 -c "
        import os
        import re
        
        print('üì¶ Checking dependency consistency...')
        
        # Check if requirements.txt exists
        if os.path.exists('requirements.txt'):
            with open('requirements.txt', 'r') as f:
                requirements = f.read()
            print('‚úÖ requirements.txt found')
            
            # Check for core dependencies mentioned in spec.md
            with open('spec.md', 'r', encoding='utf-8') as f:
                spec_content = f.read()
                
            core_deps = ['torch', 'opencv', 'numpy', 'pillow']
            
            for dep in core_deps:
                if dep.lower() in requirements.lower():
                    print(f'‚úÖ Found {dep} in requirements.txt')
                else:
                    print(f'‚ö†Ô∏è {dep} not explicitly found in requirements.txt')
        else:
            print('‚ö†Ô∏è requirements.txt not found, checking setup.py...')
            
            if os.path.exists('setup.py'):
                print('‚úÖ setup.py found for dependency management')
            else:
                print('‚ùå No dependency management file found')
                exit(1)
        "

  workflow-template-check:
    name: Workflow Template Consistency
    runs-on: ubuntu-latest
    needs: spec-validation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Check Template References
      run: |
        python3 -c "
        import os
        import glob
        import re
        
        print('üìã Checking workflow template references...')
        
        # Find all workflow template files
        template_files = glob.glob('docs/workflows/*.md')
        
        spec_reference_pattern = r'\[.*spec\.md.*\]'
        outdated_version_pattern = r'v\d+\.\d+\.\d+'
        
        issues_found = False
        
        for template_file in template_files:
            print(f'üîç Checking {template_file}...')
            
            with open(template_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Check for spec.md references
            if 'spec.md' in content:
                print(f'‚úÖ {template_file} references spec.md')
            else:
                print(f'‚ö†Ô∏è {template_file} does not reference spec.md')
                issues_found = True
            
            # Check for hardcoded version numbers
            version_matches = re.findall(outdated_version_pattern, content)
            if version_matches:
                print(f'‚ö†Ô∏è {template_file} contains hardcoded versions: {version_matches}')
                issues_found = True
            
            # Check for specific dataset names (should be variables)
            dataset_names = ['kaname', 'test_dataset']
            for dataset_name in dataset_names:
                if dataset_name in content.lower() and '[dataset_name]' not in content:
                    print(f'‚ö†Ô∏è {template_file} may contain hardcoded dataset name: {dataset_name}')
        
        if issues_found:
            print('‚ö†Ô∏è Template consistency issues found (non-blocking)')
        else:
            print('‚úÖ All workflow templates are consistent')
        "

  update-notification:
    name: Specification Update Notification
    runs-on: ubuntu-latest
    needs: [spec-validation, dependency-check, workflow-template-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Check for Spec Changes
      run: |
        # Check if spec.md was modified in this push
        if git diff --name-only HEAD~1 HEAD | grep -q "spec.md"; then
          echo "üìã spec.md was updated in this push"
          
          # Extract version information
          if grep -q "„Éê„Éº„Ç∏„Éß„É≥" spec.md; then
            echo "‚ÑπÔ∏è Version information found in spec.md"
          fi
          
          # Create summary of changes
          echo "üìù Recent spec.md changes:"
          git diff HEAD~1 HEAD --name-only | grep "spec.md" || echo "No spec.md changes detected"
          
          echo "‚úÖ Specification update notification completed"
        else
          echo "‚ÑπÔ∏è No spec.md changes in this push"
        fi

  environment-test:
    name: Environment Compatibility Test
    runs-on: ubuntu-latest
    needs: spec-validation
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Test Python Version Compatibility
      run: |
        python3 -c "
        import sys
        
        print(f'üêç Testing Python {sys.version}')
        
        # Read spec requirements
        with open('spec.md', 'r', encoding='utf-8') as f:
            spec_content = f.read()
        
        # Basic compatibility test
        if sys.version_info >= (3, 8):
            print('‚úÖ Python version meets minimum requirements')
        else:
            print('‚ùå Python version below minimum requirements')
            exit(1)
        
        # Test core imports that should be available
        try:
            import json
            import pathlib
            import subprocess
            print('‚úÖ Core Python modules available')
        except ImportError as e:
            print(f'‚ùå Core module import failed: {e}')
            exit(1)
        "
        
    - name: Validate Basic Dependencies
      run: |
        # Test that pip can resolve basic dependencies
        python3 -m pip install --upgrade pip
        
        # Try to install numpy as a basic test
        pip install numpy
        python3 -c "import numpy; print(f'‚úÖ NumPy {numpy.__version__} installed successfully')"